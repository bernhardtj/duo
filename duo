#!/usr/bin/env python3
"""
Use duo with pyOTP.
N.B. pyOTP is not a dependency for HOTP secret retrieval from duo device join codes.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import sys

commands = {
    'fetch': {
        'help': 'Fetch a HOTP secret from a duo endpoint.',
        'args': {
            'url': {
                'help': 'A duo:// link.',
                'type': str,
                'action': 'store'
            }
        }
    },
    'code': {
        'help': 'Generate HOTP codes.',
        'args': {
            ('-s', '--secret'): {
                'help': 'The HOTP secret (default -).',
                'type': str,
                'default': '-',
                'action': 'store'
            },
            '-n': {
                'help': 'Generate Nth code or (for N<0) a code based on the UNIX time (default -1).',
                'type': int,
                'default': -1,
                'action': 'store'
            },
            ('-l', '--list'): {
                'help': 'List all codes up to N.',
                'action': 'store_true'
            }
        }
    }
}

post_body = {
    'headers': {
        'User-Agent': 'okhttp/2.7.5'},
    'data': {
        'jailbroken': 'false',
        'architecture': 'armv7',
        'region': 'US',
        'app_id': 'com.duosecurity.duomobile',
        'full_disk_encryption': 'true',
        'passcode_status': 'true',
        'platform': 'Android',
        'app_version': '3.23.0',
        'app_build_number': '323001',
        'version': '8.1',
        'manufacturer': 'unknown',
        'language': 'en',
        'model': 'Pixel C',
        'security_patch_level': '2018-12-01'}
}


def fetch(url: str):
    import base64
    import json
    import requests

    try:
        hostb64 = url.split('-')[1]
        host = str(base64.b64decode(hostb64 + '=' * (-len(hostb64) % 4)), 'utf-8')
        code = url.split('-')[0].replace('duo://', '')
        post_body.update(dict(url=f'https://{host}/push/v2/activation/{code}?customer_protocol=1'))
    except (IndexError, UnicodeDecodeError):
        print(f'duo fetch: error: invalid duo:// url: {url}', file=sys.stderr)
        return 1

    try:
        r = requests.post(**post_body)
        response = json.loads(r.text)
    except requests.exceptions.ConnectionError as e:
        print(f'duo fetch: error: {e}', file=sys.stderr)
        return 1

    try:
        hotp_secret = response['response']['hotp_secret']
    except KeyError:
        try:
            print(f'duo fetch: error: {response["message"]}', file=sys.stderr)
            return 1
        except KeyError:
            print(f'duo fetch: error: received {response}', file=sys.stderr)
            return 1

    secret = str(base64.b32encode(hotp_secret.encode('ascii')), 'ascii')

    print(secret)
    return 0


def code(secret: str, n: int, list: bool):
    from time import time
    import pyotp

    if secret == '-':
        secret = sys.stdin.read().strip()
    if secret:
        hotp = pyotp.HOTP(secret)
    else:
        print('duo code: error: blank secret.', file=sys.stderr)
        return 1

    if list:
        if n < 0:
            print('duo code: error: argument -l, --list: please specify a positive N, e.g. -n 3.', file=sys.stderr)
            return 1
        else:
            print('\n'.join(f'{i}: {hotp.at(i)}' for i in range(n + 1)))
    else:
        if n < 0:
            print(hotp.at(int(time())), end='')
        else:
            print(hotp.at(n), end='')
    return 0


if __name__ == '__main__':
    from argparse import ArgumentParser


    def wrapper(command, **kwargs):
        return eval(command)(**kwargs)


    parser = ArgumentParser()
    s = parser.add_subparsers(help='commands', dest='command')

    for c in commands:
        a = commands[c].pop('args')
        p = s.add_parser(c, **commands[c])
        for b in a:
            p.add_argument(*((b,) if type(b) is str else b), **a[b])

    args = parser.parse_args()
    if args.command:
        sys.exit(wrapper(**vars(args)))
    else:
        parser.print_help()
